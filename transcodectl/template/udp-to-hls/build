#!/bin/bash

set -o errexit
set -o nounset

_id="$1"

if [ -f "${TRANSCODE_INSTANCED_PATH}/${_id}/build.env" ]; then
    source "${TRANSCODE_INSTANCED_PATH}/${_id}/build.env"
fi

if [ -f "${TRANSCODE_INSTANCED_PATH}/${_id}/build.d/select_audio_stream.sh" ]; then
    source "${TRANSCODE_INSTANCED_PATH}/${_id}/build.d/select_audio_stream.sh"
fi

if [ -f "${TRANSCODE_INSTANCED_PATH}/${_id}/build.d/select_video_stream.sh" ]; then
    source "${TRANSCODE_INSTANCED_PATH}/${_id}/build.d/select_video_stream.sh"
fi

if ! typeset -f select_audio_stream > /dev/null; then
    function select_audio_stream() {
        echo "0:a:0?"
    }
fi

if ! typeset -f select_video_stream > /dev/null; then
    function select_video_stream() {
        echo "0:v:0?"
    }
fi

function _build_input_conf() {
    local id="$1"; shift
    local input="$1"; shift
    local input_conf="${TRANSCODE_INSTANCED_PATH}/${id}/input.conf.template"

    echo -f mpegts > "${input_conf}"

    if [ "${UDP2HLS_INPUT_CUVID:-0}" -eq 1 ]; then
        local input_codec; input_codec="$( _get_video_codec "${input}" )"
        local cuvid_codec; cuvid_codec="$( _get_cuvid_codec_name "${input_codec}" )"

        echo "-hwaccel cuvid" >> "${input_conf}"
        echo "-hwaccel_device \${TRANSCODE_GPU}" >> "${input_conf}"
        echo "-gpu \${TRANSCODE_GPU}" >> "${input_conf}"

        if [ "${UDP2HLS_INPUT_DEINTERLACE:-0}" -gt 0 ]; then
            echo "-deint ${UDP2HLS_INPUT_DEINTERLACE}" >> "${input_conf}"
            echo "-drop_second_field 1" >> "${input_conf}"
        fi

        if [ -n "${UDP2HLS_INPUT_RESIZE:-}" ]; then
            echo "-resize ${UDP2HLS_INPUT_RESIZE}" >> "${input_conf}"
        fi

        if [ -n "${cuvid_codec}" ]; then
            echo "-c:v ${cuvid_codec}" >> "${input_conf}"
        fi
    fi

    echo "-i ${input}?buffer_size=$( _get_input_buffer_size "${UDP2HLS_INPUT_BITRATE}" )&fifo_size=$( _get_input_fifo_size "${UDP2HLS_INPUT_BITRATE}" )" >> "${input_conf}"
}

function _build_output_automap() {
    local id="$1"; shift
    local input="$1"; shift
    local output_automap="${TRANSCODE_INSTANCED_PATH}/${id}/output.automap"

    if [ -n "${AUTOMAP_PREFERRED_LANGUAGES:-}" ] && [ -f "${output_automap}.template" ]; then
        AUTOMAP_INPUT="${input}" envsubst '${AUTOMAP_INPUT} ${AUTOMAP_PREFERRED_LANGUAGES}' \
            < "${output_automap}.template" \
            > "${output_automap}"
    else
        echo "#!/bin/bash" > "${output_automap}"
        echo "echo -map ${_TRANSCODE_VIDEO_STREAM}" >> "${output_automap}"
        echo "echo -map ${_TRANSCODE_AUDIO_STREAM}" >> "${output_automap}"
    fi

    chmod +x "${output_automap}"
}

function _build_output_conf() {
    local id="$1"; shift
    local name="$1"; shift
    local output_conf="${TRANSCODE_INSTANCED_PATH}/${id}/output.conf.template"

    echo "-f hls" > "${output_conf}"
    echo "-hls_time ${UDP2HLS_HLS_TIME:-6}" >> "${output_conf}"
    echo "-hls_list_size ${UDP2HLS_HLS_LIST_SIZE:-10}" >> "${output_conf}"
    echo "-hls_flags ${UDP2HLS_HLS_FLAGS:-delete_segments}" >> "${output_conf}"
    if [ -n "${UDP2HLS_HLS_BASE_URL:-}" ]; then
        echo "-hls_base_url \"${UDP2HLS_HLS_BASE_URL}\"" >> "${output_conf}"
    fi
    echo "-hls_segment_filename \"${UDP2HLS_HLS_SEGMENT_FILENAME:-segment-%03d.ts}\"" >> "${output_conf}"
    echo "-use_localtime 1" >> "${output_conf}"
    echo "-hls_key_info_file \"\${TRANSCODE_CONF_PATH}/keyinfo\"" >> "${output_conf}"

    echo "-c:v ${UDP2HLS_VIDEO_CODEC}" >> "${output_conf}"
    if [ -n "${UDP2HLS_VIDEO_BITRATE:-}" ]; then
        echo "-b:v ${UDP2HLS_VIDEO_BITRATE}" >> "${output_conf}"
        echo "-maxrate:v $( _get_output_max_bitrate "${UDP2HLS_VIDEO_BITRATE}" )" >> "${output_conf}"
        echo "-bufsize:v $( _get_output_buffer_size "${UDP2HLS_VIDEO_BITRATE}" "${UDP2HLS_VIDEO_FRAMERATE}" )" >> "${output_conf}"
    fi

    if [ -n "${UDP2HLS_VIDEO_FRAMERATE:-}" ]; then
        echo "-r ${UDP2HLS_VIDEO_FRAMERATE}" >> "${output_conf}"

        if [ -n "${UDP2HLS_VIDEO_KEYFRAME:-}" ]; then
            echo "-g ${UDP2HLS_VIDEO_KEYFRAME}" >> "${output_conf}"
            echo "-force_key_frames \"expr:gte(t,n_forced*$(( ${UDP2HLS_VIDEO_KEYFRAME} / ${UDP2HLS_VIDEO_FRAMERATE} )))\""  >> "${output_conf}"
        fi
    fi

    echo "-c:a ${UDP2HLS_AUDIO_CODEC}" >> "${output_conf}"
    if [ -n "${UDP2HLS_AUDIO_BITRATE:-}" ]; then
        echo "-b:a ${UDP2HLS_AUDIO_BITRATE}" >> "${output_conf}"
    fi

    echo "-gpu \${TRANSCODE_GPU}" >> "${output_conf}"
    echo "-zerolatency 1" >> "${output_conf}"

    echo "-metadata \"service_name=${UDP2HLS_META_SERVICE_NAME:-${name}}\"" >> "${output_conf}"

    if [ -n "${UDP2HLS_META_SERVICE_PROVIDER:-}" ]; then
        echo "-metadata \"service_provider=${UDP2HLS_META_SERVICE_PROVIDER}\"" >> "${output_conf}"
    fi

    echo "\${HOME}/playlist.m3u8" >> "${output_conf}"
}

function _build_trancode_conf() {
    local id="$1"; shift
    local template_conf="${TRANSCODE_INSTANCED_PATH}/${id}/transcode.conf.template"

    echo "-loglevel ${UDP2HLS_LOGLEVEL:-warning}" > "${template_conf}"
    echo "-nostats" >> "${template_conf}"
    echo "-ignore_unknown" >> "${template_conf}"
}

function _get_cuvid_codec_name() {
    local input_codec="$1"; shift

    case "${input_codec}" in
        h264)
            echo "h264_cuvid" ;;

        mpeg2video)
            echo "mpeg2_cuvid" ;;
    esac
}

function _get_input_buffer_size() {
    local bitrate="$1"; shift

    echo $(( ${bitrate} / 8 * 10 ))
}

function _get_input_fifo_size() {
    local bitrate="$1"; shift

    echo $(( ${bitrate} / 8 / 188 * 10 ))
}

function _get_output_buffer_size() {
    local bitrate="$1"; shift
    local framerate="$1"; shift

    echo $(( ${bitrate} * 4 / ${framerate} ))
}

function _get_output_max_bitrate() {
    local bitrate="$1"; shift

    echo $(( ${bitrate} * 12 / 10 ))
}

function _get_video_codec() {
    local input="$1"; shift
    local stream="${1:-v:0}"

    timeout 60 ffprobe \
        -v quiet \
        -select_streams "${stream}" \
        -show_entries program_stream=codec_name \
        -of default=noprint_wrappers=1:nokey=1 \
        "${input}" || true
}

function build() {
    local id="$1"; shift
    local input="$1"; shift
    local name="$1"; shift

    export _TRANSCODE_AUDIO_STREAM="$( select_audio_stream "${id}" "${input}" )"
    export _TRANSCODE_VIDEO_STREAM="$( select_video_stream "${id}" "${input}" )"

    _build_trancode_conf "${id}"
    _build_input_conf "${id}" "${input}"
    _build_output_conf "${id}" "${name}"
    _build_output_automap "${id}" "${input}"

    echo "${name}" > "${TRANSCODE_INSTANCED_PATH}/${_id}/service_name"
}

build "$@"
